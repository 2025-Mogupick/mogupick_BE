name: CI/CD - Build & Deploy to EC2 via Docker Hub

on:
  push:
    branches: [ "develop" ]

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build JAR
        run: ./gradlew clean bootJar

      - name: Set image meta
        id: meta
        run: |
          IMAGE="${{ secrets.IMAGE_REPO }}"
          if [ -z "$IMAGE" ]; then IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/mogupick"; fi
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
          echo "TAG_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG_SHA }} -t ${{ steps.meta.outputs.IMAGE }}:latest .

      - name: Push Docker image
        run: |
          docker push ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG_SHA }}
          docker push ${{ steps.meta.outputs.IMAGE }}:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            APP_DIR="${{ secrets.APP_DIR }}"
            if [ -z "$APP_DIR" ]; then APP_DIR="/opt/mogupick"; fi
            IMAGE="${{ steps.meta.outputs.IMAGE }}:latest"

            echo "[1/3] Pull latest image"
            docker pull "$IMAGE"

            echo "[2/3] Update compose"
            cd "$APP_DIR"
            if [ -f docker-compose.yml ]; then
              sed -i "s|image: .*|image: ${{ steps.meta.outputs.IMAGE }}:latest|g" docker-compose.yml
            fi
            docker compose up -d

            echo "[3/3] Cleanup old images"
            docker image prune -f || true
