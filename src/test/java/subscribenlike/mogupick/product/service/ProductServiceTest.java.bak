package subscribenlike.mogupick.product.service;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import subscribenlike.mogupick.brand.domain.Brand;
import subscribenlike.mogupick.brand.repository.BrandRepository;
import subscribenlike.mogupick.member.domain.Member;
import subscribenlike.mogupick.member.repository.MemberRepository;
import subscribenlike.mogupick.product.domain.MemberProductViewCount;
import subscribenlike.mogupick.product.domain.Product;
import subscribenlike.mogupick.product.model.FetchProductDetailResponse;
import subscribenlike.mogupick.product.model.query.RecentlyViewProductsQueryResult;
import subscribenlike.mogupick.product.repository.MemberProductViewCountRepository;
import subscribenlike.mogupick.product.repository.ProductRepository;
import subscribenlike.mogupick.product.repository.ProductViewCountRepository;
import subscribenlike.mogupick.review.domain.Review;
import subscribenlike.mogupick.review.repository.ReviewRepository;
import subscribenlike.mogupick.support.ServiceTest;
import subscribenlike.mogupick.support.fixture.*;

import java.math.BigDecimal;

import static org.assertj.core.api.Assertions.assertThat;

@ServiceTest
class ProductServiceTest {

    @Autowired
    private ProductService productService;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private MemberRepository memberRepository;

    @Autowired
    private BrandRepository brandRepository;

    @Autowired
    private MemberProductViewCountRepository memberProductViewCountRepository;

    @Autowired
    private ReviewRepository reviewRepository;

    @Test
    void 멤버의_최근_본_상품_목록을_조회할_수_있다() {
        // Given: 테스트 데이터 준비
        Member member = memberRepository.save(MemberFixture.김회원());
        Brand brand = brandRepository.save(BrandFixture.쿠팡(member));

        Product product1 = productRepository.save(ProductFixture.구독상품1(brand));
        Product product2 = productRepository.save(ProductFixture.구독상품2(brand));

        // 리뷰 데이터 추가
        Review review1 = reviewRepository.save(ReviewFixture.상품리뷰1(member, product1));
        Review review2 = reviewRepository.save(ReviewFixture.상품리뷰2(member, product2));

        // 멤버 상품 조회 기록 추가
        MemberProductViewCount viewCount1 = memberProductViewCountRepository.save(
                MemberProductViewCountFixture.회원상품조회1(product1, member));
        MemberProductViewCount viewCount2 = memberProductViewCountRepository.save(
                MemberProductViewCountFixture.회원상품조회2(product2, member));

        // When: 최근 본 상품 목록 조회
        Page<RecentlyViewProductsQueryResult> result = productService.fetchRecentlyViewedProducts(
                member.getId(), PageRequest.of(0, 10));

        // Then: 결과 검증
        assertThat(result.getTotalElements()).isEqualTo(2);
        assertThat(result.getContent()).hasSize(2);

        // 첫 번째 상품 검증 (lastViewedAt 내림차순으로 정렬되므로 최근 것이 먼저)
        RecentlyViewProductsQueryResult firstResult = result.getContent().get(0);
        assertThat(firstResult.getProductId()).isEqualTo(product2.getId());
        assertThat(firstResult.getProductName()).isEqualTo(product2.getName());
        assertThat(firstResult.getBrandName()).isEqualTo(brand.getName());
        assertThat(firstResult.getRating()).isEqualTo(5.0); // 상품리뷰2의 평점
        assertThat(firstResult.getReviewCount()).isEqualTo(1);
        assertThat(firstResult.getViewCount()).isEqualTo(10); // 회원상품조회2의 조회수
        assertThat(firstResult.getProductImageUrls()).isNull(); // 다중 이미지 지원 전이므로 null

        // 두 번째 상품 검증
        RecentlyViewProductsQueryResult secondResult = result.getContent().get(1);
        assertThat(secondResult.getProductId()).isEqualTo(product1.getId());
        assertThat(secondResult.getProductName()).isEqualTo(product1.getName());
        assertThat(secondResult.getBrandName()).isEqualTo(brand.getName());
        assertThat(secondResult.getRating()).isEqualTo(4.5); // 상품리뷰1의 평점
        assertThat(secondResult.getReviewCount()).isEqualTo(1);
        assertThat(secondResult.getViewCount()).isEqualTo(5); // 회원상품조회1의 조회수
        assertThat(secondResult.getProductImageUrls()).isNull();
    }

    @Test
    void 멤버의_최근_본_상품이_없으면_빈_목록을_반환한다() {
        // Given: 멤버만 존재하고 상품 조회 기록이 없는 경우
        Member member = memberRepository.save(MemberFixture.김회원());

        // When: 최근 본 상품 목록 조회
        Page<RecentlyViewProductsQueryResult> result = productService.fetchRecentlyViewedProducts(
                member.getId(), PageRequest.of(0, 10));

        // Then: 빈 목록 반환
        assertThat(result.getTotalElements()).isEqualTo(0);
        assertThat(result.getContent()).isEmpty();
    }

    @Test
    void 상품_상세_정보를_조회할_수_있다() {
        // Given: 테스트 데이터 준비
        Member member = memberRepository.save(MemberFixture.김회원());
        Brand brand = brandRepository.save(BrandFixture.쿠팡(member));
        Product product = productRepository.save(ProductFixture.구독상품1(brand));

        // 여러 리뷰 추가
        Review review1 = reviewRepository.save(ReviewFixture.상품리뷰1(member, product));
        Review review2 = reviewRepository.save(ReviewFixture.상품리뷰2(member, product));
        Review review3 = reviewRepository.save(ReviewFixture.상품리뷰3(member, product));

        // When: 상품 상세 정보 조회
        FetchProductDetailResponse result = productService.findProductDetailById(product.getId());

        // Then: 결과 검증
        assertThat(result.getProductId()).isEqualTo(product.getId());
        assertThat(result.getProductName()).isEqualTo(product.getName());
        assertThat(result.getProductImageUrls()).isNull(); // 다중 이미지 지원 전이므로 null
        assertThat(result.getPrice()).isEqualTo(product.getPrice());
        assertThat(result.getBrandId()).isEqualTo(brand.getId());
        assertThat(result.getBrandName()).isEqualTo(brand.getName());
        assertThat(result.getAverageRating()).isEqualTo(4.5); // (4.5 + 5.0 + 4.0) / 3 = 4.33... ≈ 4.5
        assertThat(result.getReviewCount()).isEqualTo(3);
    }

    @Test
    void 리뷰가_없는_상품의_상세_정보를_조회할_수_있다() {
        // Given: 리뷰가 없는 상품
        Member member = memberRepository.save(MemberFixture.김회원());
        Brand brand = brandRepository.save(BrandFixture.쿠팡(member));
        Product product = productRepository.save(ProductFixture.구독상품1(brand));

        // When: 상품 상세 정보 조회
        FetchProductDetailResponse result = productService.findProductDetailById(product.getId());

        // Then: 결과 검증
        assertThat(result.getProductId()).isEqualTo(product.getId());
        assertThat(result.getProductName()).isEqualTo(product.getName());
        assertThat(result.getProductImageUrls()).isNull();
        assertThat(result.getPrice()).isEqualTo(product.getPrice());
        assertThat(result.getBrandId()).isEqualTo(brand.getId());
        assertThat(result.getBrandName()).isEqualTo(brand.getName());
        assertThat(result.getAverageRating()).isEqualTo(0.0); // 리뷰가 없으므로 0.0
        assertThat(result.getReviewCount()).isEqualTo(0);
    }
}