# Spring Boot 테스트 코드 작성 지시 프롬프트

## 프로젝트 정보
- **프로젝트명**: Mogupick
- **Spring Boot 버전**: 3.5.4
- **Java 버전**: 17
- **빌드 도구**: Gradle
- **데이터베이스**: MySQL (운영), H2 (테스트)
- **테스트 프레임워크**: JUnit 5 + Spring Boot Test

## 테스트 작성 원칙

### 1. Mock 최소화 원칙
- **실제 데이터베이스 사용**: `@ServiceTest` 어노테이션을 사용하여 실제 H2 데이터베이스에서 테스트 실행
- **통합 테스트 지향**: 단위 테스트보다는 통합 테스트 위주로 작성
- **Fixture 활용**: 테스트 데이터는 Fixture 클래스를 통해 생성
- **DatabaseCleaner 활용**: 각 테스트 후 자동으로 데이터베이스 정리

### 2. 테스트 구조
```java
@ServiceTest
class [도메인명]ServiceTest {
    @Autowired
    [Repository] repository;
    @Autowired
    [Service] service;

    @Test
    void [테스트_시나리오_설명]() {
        // Given: 테스트 데이터 준비
        // When: 테스트 대상 메서드 실행
        // Then: 결과 검증
    }
}
```

### 3. Fixture 작성 규칙
```java
public enum [도메인명]Fixture {
    [이름]("[값]");
    
    private String value;
    
    [도메인명]Fixture(String value) {
        this.value = value;
    }
    
    public static [도메인] [이름]([의존성]) {
        return new [도메인]([이름].value, [의존성]);
    }
}
```

### 4. 테스트 작성 가이드라인

#### 4.1 테스트 메서드 명명 규칙
- **한국어 사용**: 테스트 메서드명은 한국어로 작성 (언더스코어로 단어 구분)
- **명확한 시나리오**: "~할 수 있다", "~하면 ~한다" 형태로 작성
- **예외 케이스**: "~일 경우 ~실패" 형태로 작성

#### 4.2 테스트 데이터 관리
- **Fixture 활용**: 반복되는 테스트 데이터는 Fixture로 관리
- **의존성 주입**: Entity 간 관계가 있는 경우 Fixture에서 의존성 주입
- **실제 데이터**: Mock 대신 실제 Entity 객체 사용

#### 4.3 검증 방법
- **AssertJ 사용**: `assertThat()` 메서드 활용
- **예외 검증**: `assertThatThrownBy()` 사용
- **데이터베이스 검증**: Repository를 통한 실제 데이터 검증

### 5. 테스트 환경 설정

#### 5.1 어노테이션
```java
@ServiceTest  // 통합 테스트용 어노테이션
```

#### 5.2 프로파일
- **테스트 프로파일**: `application-test.yml` 사용
- **H2 데이터베이스**: 메모리 기반 테스트 데이터베이스
- **자동 정리**: `DatabaseCleanerExtension`으로 테스트 후 자동 정리

### 6. 예시 테스트 코드

#### 6.1 성공 케이스
```java
@Test
void 브랜드_저장할_수_있다() {
    // Given
    Member member = MemberFixture.김회원();
    memberRepository.save(member);
    Brand brand = BrandFixture.쿠팡(member);
    
    // When
    brandRepository.save(brand);
    
    // Then
    assertThat(brandRepository.count()).isEqualTo(1);
}
```

#### 6.2 예외 케이스
```java
@Test
void 권한이_사용자일_경우_브랜드_등록_실패() {
    // Given
    Member member = MemberFixture.김모구();
    memberRepository.save(member);
    BrandCreateRequest request = new BrandCreateRequest("모구픽");
    
    // When & Then
    assertThatThrownBy(() -> brandService.save(member.getId(), request))
            .isInstanceOf(IllegalArgumentException.class);
}
```

### 7. 주의사항
- 컴파일이 되는지 반드시 확인

#### 7.1 Mock 사용 제한
- **Repository Mock 금지**: 실제 Repository 사용
- **Service Mock 금지**: 실제 Service 사용
- **외부 API**: 외부 API 호출이 필요한 경우에만 Mock 사용

#### 7.2 테스트 격리
- **DatabaseCleaner**: 각 테스트 후 자동으로 데이터 정리
- **트랜잭션**: 테스트 메서드별로 독립적인 트랜잭션
- **의존성**: 테스트 간 의존성 없도록 설계

#### 7.3 성능 고려
- **테스트 속도**: 실제 데이터베이스 사용으로 인한 속도 저하 고려
- **테스트 크기**: 너무 큰 테스트는 분리
- **데이터 양**: 필요한 최소한의 테스트 데이터만 사용

### 8. 테스트 작성 체크리스트

- [ ] `@ServiceTest` 어노테이션 사용
- [ ] 테스트 메서드명은 한국어로 작성
- [ ] Fixture 클래스 활용하여 테스트 데이터 생성
- [ ] 실제 Repository와 Service 사용 (Mock 최소화)
- [ ] Given-When-Then 구조로 테스트 작성
- [ ] 성공 케이스와 실패 케이스 모두 테스트
- [ ] AssertJ를 사용한 검증
- [ ] 예외 케이스는 `assertThatThrownBy()` 사용
- [ ] 데이터베이스 상태 검증 포함

### 9. 의존성 정보

#### 9.1 테스트 관련 의존성
```gradle
testImplementation 'org.springframework.boot:spring-boot-starter-test'
testImplementation 'io.rest-assured:rest-assured'
testRuntimeOnly 'com.h2database:h2'
testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
```

#### 9.2 주요 라이브러리
- **Spring Boot Test**: 통합 테스트 지원
- **H2 Database**: 메모리 기반 테스트 데이터베이스
- **JUnit 5**: 테스트 프레임워크
- **AssertJ**: 검증 라이브러리
- **Rest Assured**: REST API 테스트 (필요시)